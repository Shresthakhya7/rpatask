from robocorp.tasks import task
from RPA.Browser.Selenium import Selenium
from RPA.Excel.Files import Files
import time
import psycopg2

class Rottentomatoes:
    def __init__(self):
        self.browser=Selenium()
        self.rottentomato_url="https://www.rottentomatoes.com/search?search="
        
        
        self.search_result_page__movie_tab_xpath = "//li[@data-filter='movie']"
        self.search_result_page__movie_card_xpath = "//search-page-result[@type='movie']//ul[@slot='list']//search-page-media-row"
        self.search_result_page__movie_url_xpath = self.search_result_page__movie_card_xpath + "//a[@data-qa='info-name']"

        self.movie_page__movie_name_xpath = "//h1[@slot='titleIntro']"
        
        self.tomatometer_score_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/rt-button[2]/rt-text"
        self.popcornmeter_score_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/rt-button[5]/rt-text"
        self.storyline_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/div[1]/drawer-more/rt-text"
        self.rating_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/rt-link[2]"
        self.genres_xpath="//*[@id='modules-wrap']/div[11]/section/div[2]/dl/div[7]/dd"
        self.critics_review_xpath="//div[@class='review-row']//p[@class='review-text']"



    def read_movie_list_from_excel(self):
        excel = Files()
        excel.open_workbook("Movies.xlsx")
        movie_list=excel.read_worksheet_as_table(header=True)
        excel.close_workbook()
    
        return [movie['Movie'] for movie in movie_list]
    
    def open_browser(self):
        self.browser.open_chrome_browser(self.rottentomato_url)
        self.browser.maximize_browser_window()

    def search_movie(self,movie_name):
        return self.rottentomato_url + movie_name
        

    # def scroll_to_load_movies(self):
    #     for _ in range(2):
    #         self.browser.press_keys(None, 'PAGE_DOWN')
    #         time.sleep(1)
        
    #     for _ in range(2):
    #         self.browser.press_keys(None, "PAGE_UP")
    #         time.sleep(1)

    def exact_movie_details(self, movie_name):

        search_result_url=self.search_movie(movie_name) 
        self.browser.go_to(search_result_url)

        self.browser.click_element_when_clickable(self.search_result_page__movie_tab_xpath)
        
        movie_element_card = self.browser.find_elements(self.search_result_page__movie_card_xpath)
        movie_releaseyear = [movie.get_attribute("releaseyear") for movie in movie_element_card]
        
        movie_url_element = self.browser.find_elements(self.search_result_page__movie_url_xpath)
        movie_names = [movie.text for movie in movie_url_element]
        movie_url = [movie.get_attribute("href") for movie in movie_url_element]
        
        movie_data = {}
        for name, releaseyear, url in zip(movie_names, movie_releaseyear, movie_url):
            if name.strip() == movie_name.strip():
                movie_data[int(releaseyear.strip())] = {
                    'name': name,
                    'url': url
                }

        if movie_data == {}:
            return None
        
        movie_data = sorted(movie_data.items(), key=lambda x: x[0], reverse=True)
        target_movie_data = movie_data[0]
        target_movie_url = target_movie_data[-1]['url']

        return target_movie_url

    def extract_movie_details(self,url= None, movie_name=None):
        movie_data = {
            'movie_name': movie_name,
            'tomatometer': None,
            'popcornmeter': None,
            'storyline': None,
            'genres': None,
            'rating': None,
            'review_1': None,
            'review_2': None,
            'review_3': None,
            'review_4': None,
            'review_5': None,
            'status': 'No exact match found'
        }
        
        if url == None:
            return movie_data
        
        self.browser.go_to(url)
        tomatometer_score=self.browser.get_text(self.tomatometer_score_xpath)
        tomatometer_score=tomatometer_score.replace('%','')
        popcornmeter_score=self.browser.get_text(self.popcornmeter_score_xpath)
        popcornmeter_score=popcornmeter_score.replace('%','')
        storyline=self.browser.get_text(self.storyline_xpath)
        rating=self.browser.get_text(self.rating_xpath)
        genres = self.browser.get_text(self.genres_xpath)
        genres = [genre.strip() for genre in genres.split(',')]
        genres = '/'.join(genres)
        
        print(f"Movie:{movie_name}")
        print(f"Tomatometer Score:{tomatometer_score}")
        print(f"Popcornmeter Score:{popcornmeter_score}")
        print(f"Storyline:{storyline}")
        print(f"Rating:{rating}")
        print(f"genres:{genres}")

        self.browser.go_to(f'{url}/reviews')

        reviews = self.browser.find_elements(self.movie_critic_review_page__reviews_xpath)
        reviews = [review.text for review in reviews]
        reviews = reviews[:5] # selecting only 5 reviews

        movie_data['tomatometer'] = tomatometer_score
        movie_data['popcornmeter'] = popcornmeter_score
        movie_data['storyline'] = storyline
        movie_data['genres'] = genres
        movie_data['rating'] = rating
        movie_data['review_1'] = reviews[0]
        movie_data['review_2'] = reviews[1]
        movie_data['review_3'] = reviews[2]
        movie_data['review_4'] = reviews[3]
        movie_data['review_5'] = reviews[4]
        movie_data['status'] = 'Success'

        return movie_data
        

        

    # def click_read_all_reviews(self):
    #     read_reviews_xpath = "//*[@id='modules-wrap']/div[4]/section/div[1]/rt-link"      
    #     try:
    #         if self.browser.is_element_visible(read_reviews_xpath):
    #             print("Clicking on 'Read All Reviews")
    #             self.browser.click_element(read_reviews_xpath)
    #             time.sleep(1)
    #         else:
    #             print("No Reviews...")
    #     except Exception as e:
    #         print(f"Error while extracting reviews: {e}")

    # def extract_reviews(self,critics_review_xpath):
    #     try:
    #         #self.scroll_to_load_movies()
    #         reviews_elements = self.browser.get_webelements(critics_review_xpath)

    #         top_reviews = [review.text.strip() for review in reviews_elements[:5]]

    #         print("Top 5 Reviews:\n")
    #         for index, review in enumerate(top_reviews, 1):
    #             print(f"Review {index}: {review}\n")
    #         return top_reviews
        
    #     except Exception as e:
    #         print(f"Error while extracting reviews: {e}")
    #         return []



    ##Database Connection
    # def connect_database(self):
    #     """Establish a connection to the PostgreSQL database."""
    #     # PostgreSQL connection details
    #     db_host = 'localhost'
    #     db_name = 'movie_db'
    #     db_user = 'postgres'
    #     db_password = 'hello'

    #     try:
    #         # Connect to PostgreSQL database
    #         self.connection = psycopg2.connect(
    #             host=db_host,
    #             database=db_name,
    #             user=db_user,
    #             password=db_password
    #         )
    #         print("Database connection established.")
    #         self.cursor = self.connection.cursor()
    #         self.create_table()
    #     except psycopg2.Error as e:
    #         print(f"Database connection error: {e}")
    #         self.connection = None
    
    # def create_table(self):
    #     """Create the movies table if it doesn't exist."""
    #     if self.connection:
    #         self.cursor.execute(
    #             """
    #             CREATE TABLE IF NOT EXISTS movies (
    #                 id SERIAL PRIMARY KEY,
    #                 movie_name VARCHAR(255),
    #                 tomatometer_score INTEGER,
    #                 popcornmeter_score INTEGER,
    #                 storyline TEXT,
    #                 rating VARCHAR(50),
    #                 genres VARCHAR(255),
    #                 review_1 TEXT,
    #                 review_2 TEXT,
    #                 review_3 TEXT,
    #                 review_4 TEXT,
    #                 review_5 TEXT,
    #                 status VARCHAR(50) NOT NULL
    #             )
    #             """
    #         )
    #         self.connection.commit()
    #     else:
    #         print("No connection available to create the table.")

    # def insert_into_table(self, movie_name, tomatometer_score, popcornmeter_score, storyline, rating, genres, review_1, review_2, review_3, review_4, review_5, status):
    #     try:
    #         self.cursor.execute(
    #             """
    #             CALL insert_rottentomatoes_data(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s);
    #             """,
    #             (movie_name, tomatometer_score, popcornmeter_score, storyline, rating, genres,
    #              review_1, review_2, review_3, review_4, review_5, status)
    #         )
    #         self.connection.commit()
    #     except Exception as e:
    #         print(f"Error occurred: {e}")
    #         self.connection.rollback()
@task
def __init__main():
    obj = Rottentomatoes()
    obj.open_browser()
    # obj.connect_database()
    movie_list = obj.read_movie_list_from_excel()
    for movie in movie_list:
        obj.search_movie(movie)
        obj.exact_movie_details(movie)
        obj.extract_movie_details(movie)
        # obj.insert_into_table(movie)
        
    