from robocorp.tasks import task
from RPA.Browser.Selenium import Selenium
from RPA.Excel.Files import Files
import time
import psycopg2

class Rottentomatoes:
    def __init__(self):
        self.browser=Selenium()
        self.rottentomato_url="https://www.rottentomatoes.com/search?search="
        self.browser.open_chrome_browser(self.rottentomato_url)
        self.browser.maximize_browser_window()

    def read_movie_list_from_excel(self):
        excel = Files()
        excel.open_workbook("Movies.xlsx")
        movie_list=excel.read_worksheet_as_table(header=True)
        excel.close_workbook()
    
        return [movie['Movie'] for movie in movie_list]
    
    def search_movie(self,movie_name):
        url = self.rottentomato_url + movie_name
        self.browser.go_to(url)
        time.sleep(1)

    # def scroll_to_load_movies(self):
    #     for _ in range(2):
    #         self.browser.press_keys(None, 'PAGE_DOWN')
    #         time.sleep(1)
        
    #     for _ in range(2):
    #         self.browser.press_keys(None, "PAGE_UP")
    #         time.sleep(1)

    def exact_movie_details(self, movie_name):
        movie_results_xpath="//*[@id='search-results']/search-page-result[1]/ul/search-page-media-row[1]/a[2]"
        movie_results=self.browser.get_webelements(movie_results_xpath)
        movie_years_xpath="//*[@id='search-results']/search-page-result[1]/ul/search-page-media-row[1]//li/div[3]/span[1]"
        movie_years=self.browser.get_webelements(movie_years_xpath)
        
        exact_matches=[]

        for movie in movie_results:
            movie_title=self.browser.get_text(movie)
            if movie_name.lower() == movie_title.lower():
                exact_matches.append(movie)

        

        if not exact_matches:
            print(f"No movies found: {movie_name}")
            return 'NO exact match found',{}
        
        most_recent_movie = exact_matches[0]  # For example, just select the first match
        
        # self.browser.wait_until_element_is_visible(movie_results)
        # self.scroll_to_load_movies()
        # Extract details from the selected movie page
        self.browser.click_element(most_recent_movie)
        time.sleep(1) 

    def extract_movie_details(self,movie_name):
        tomatometer_score_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/rt-button[2]/rt-text"
        popcornmeter_score_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/rt-button[5]/rt-text"
        storyline_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/div[1]/drawer-more/rt-text"
        rating_xpath="//*[@id='modules-wrap']/div[1]/media-scorecard/rt-link[2]"
        genres_xpath="//*[@id='modules-wrap']/div[11]/section/div[2]/dl/div[7]/dd"
        critics_review_xpath="//*[@id='modules-wrap']/div[4]/section/div[2]/carousel-slider/review-card-critic[1]/drawer-more/rt-text"

        try:
            tomatometer_score=self.browser.get_text(tomatometer_score_xpath)
            tomatometer_score=tomatometer_score.replace('%','')
            popcornmeter_score=self.browser.get_text(popcornmeter_score_xpath)
            popcornmeter_score=popcornmeter_score.replace('%','')
            storyline=self.browser.get_text(storyline_xpath)
            rating=self.browser.get_text(rating_xpath)
            genres = self.browser.get_text(genres_xpath)
            genres = [genre.strip() for genre in genres.split(',')]
            genres = '/'.join(genres)

            # self.scroll_to_load_movies()

            print(f"Movie:{movie_name}")
            print(f"Tomatometer Score:{tomatometer_score}")
            print(f"Popcornmeter Score:{popcornmeter_score}")
            print(f"Storyline:{storyline}")
            print(f"Rating:{rating}")
            print(f"genres:{genres}")

            # self.click_read_all_reviews()

            reviews=self.extract_reviews(critics_review_xpath)
            print(f"reviews: {reviews}")
        except Exception as e:
            print(f"Error while extracting details for '{movie_name}': {e}")


    # def click_read_all_reviews(self):
    #     read_reviews_xpath = "//*[@id='modules-wrap']/div[4]/section/div[1]/rt-link"      
    #     try:
    #         if self.browser.is_element_visible(read_reviews_xpath):
    #             print("Clicking on 'Read All Reviews")
    #             self.browser.click_element(read_reviews_xpath)
    #             time.sleep(1)
    #         else:
    #             print("No Reviews...")
    #     except Exception as e:
    #         print(f"Error while extracting reviews: {e}")

    def extract_reviews(self,critics_review_xpath):

        review_url="https://www.rottentomatoes.com/m/"+f"{movie_name}"

        if review_url==None:
            return None
        
        self.browser.go_to(f"{review_url}/reviews")

        try:
            #self.scroll_to_load_movies()
            reviews_elements = self.browser.get_webelements(critics_review_xpath)

            top_reviews = [review.text.strip() for review in reviews_elements[:5]]

            print("Top 5 Reviews:\n")
            for index, review in enumerate(top_reviews, 1):
                print(f"Review {index}: {review}\n")
            return top_reviews
        
        except Exception as e:
            print(f"Error while extracting reviews: {e}")
            return []



    ##Database Connection
    def connect_database(self):
        """Establish a connection to the PostgreSQL database."""
        # PostgreSQL connection details
        db_host = 'localhost'
        db_name = 'movie_db'
        db_user = 'postgres'
        db_password = 'hello'

        try:
            # Connect to PostgreSQL database
            self.connection = psycopg2.connect(
                host=db_host,
                database=db_name,
                user=db_user,
                password=db_password
            )
            print("Database connection established.")
            self.cursor = self.connection.cursor()
            self.create_table()
        except psycopg2.Error as e:
            print(f"Database connection error: {e}")
            self.connection = None
    
    def create_table(self):
        """Create the movies table if it doesn't exist."""
        if self.connection:
            self.cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS movies (
                    id SERIAL PRIMARY KEY,
                    movie_name VARCHAR(255),
                    tomatometer_score INTEGER,
                    popcornmeter_score INTEGER,
                    storyline TEXT,
                    rating VARCHAR(50),
                    genres VARCHAR(255),
                    review_1 TEXT,
                    review_2 TEXT,
                    review_3 TEXT,
                    review_4 TEXT,
                    review_5 TEXT,
                    status VARCHAR(50) NOT NULL
                )
                """
            )
            self.connection.commit()
        else:
            print("No connection available to create the table.")

    # def insert_movie_data(self, movie_name, tomatometer_score, popcornmeter_score, storyline,rating,genres, reviews, status="success"):
    #     """Insert extracted movie data to postgresql database"""
    #     if not self.connection:
    #         print("No database connection")
    #         return
        
    #     sql_query="""
    #     Insert INTO movies (movie_name, tomatometer_score, popcornmeter_score, storyline, rating, genres, review_1, review_2, review_3, review_4, review_5, status)
    #     VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s ,%s)"""
        
    #     parameters = (
    #         movie_name,  # movie_name
    #         tomatometer_score,  # tomatometer_score
    #         popcornmeter_score, #popcornmeter_score
    #         storyline,   # storyline
    #         rating,   #rating
    #         genres,  # genres
    #         reviews[0] if len(reviews) > 0 else None,  # review_1
    #         reviews[1] if len(reviews) > 1 else None,  # review_2
    #         reviews[2] if len(reviews) > 2 else None,  # review_3
    #         reviews[3] if len(reviews) > 3 else None,  # review_4
    #         reviews[4] if len(reviews) > 4 else None,  # review_5
    #         'Success'  # status
    #     )
        
    #     try:
    #         self.cursor.execute(sql_query, parameters)
    #         self.connection.commit()
    #         print(f"{movie_name} inserted successfully into database with status: {status}.")
    #     except Exception as e:
    #         print(f"Error while inserting {movie_name} into database: {e}")

@task
def __init__main():
    obj = Rottentomatoes()
    obj.connect_database()
    movie_list = obj.read_movie_list_from_excel()
    for movie in movie_list:
        obj.search_movie(movie)
        obj.exact_movie_details(movie)
        obj.extract_movie_details(movie)
        # obj.insert_movie_data()
        
    